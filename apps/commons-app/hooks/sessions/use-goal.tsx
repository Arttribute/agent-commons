"use client";

import { useState } from "react";

interface TaskContext {
  inputs?: Record<string, any>;
  objective?: string;
  expectedOutputType?: string;
}

interface Task {
  taskId: string;
  agentId: string;
  goalId: string;
  sessionId: string;
  title: string;
  description: string;
  status: "pending" | "in_progress" | "completed" | "failed";
  priority: number;
  scheduledStart: string;
  scheduledEnd: string;
  actualStart: string | null;
  actualEnd: string | null;
  estimatedDuration: string | null;
  progress: number;
  isRecurring: boolean;
  context?: TaskContext;
  tools: any[];
  metadata: any;
  summary: string | null;
  resultContent: string | null;
  createdAt: string;
  updatedAt: string;
}

interface Goal {
  goalId: string;
  agentId: string;
  sessionId: string;
  title: string;
  description: string;
  status: "pending" | "in_progress" | "completed" | "failed";
  priority: number;
  deadline: string;
  progress: number;
  isAutoGenerated: boolean;
  metadata: any;
  createdAt: string;
  updatedAt: string;
  completedAt: string | null;
  tasks: Task[];
}

export function useGoal() {
  const [goal, setGoal] = useState<Goal>({
    goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
    agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
    sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
    title: "Develop a Blogging Website",
    description:
      "Create a fully functional blogging website where users can post blogs, like, and comment on them. The website should be built using TypeScript, Next.js, Tailwind CSS, and Shadcn. The project will be broken down into several tasks including setting up the project, creating user authentication, developing the blog post feature, implementing the like and comment functionalities, and ensuring responsive design. The goal is to have a user-friendly and visually appealing platform that allows users to engage with content effectively.",
    status: "pending",
    priority: 2,
    deadline: "2025-04-20T23:37:54.061Z",
    progress: 40,
    isAutoGenerated: false,
    metadata: null,
    createdAt: "2025-04-20T23:38:25.282Z",
    updatedAt: "2025-04-20T22:38:25.282Z",
    completedAt: null,
    tasks: [
      {
        taskId: "6e743f6e-8bdc-4bdd-b9e3-167755200902",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Set Up Project Environment",
        description:
          "Initialize a new Next.js project with TypeScript and Tailwind CSS. Set up the project structure and install necessary dependencies including Shadcn for UI components.",
        status: "completed",
        priority: 1,
        scheduledStart: "2025-04-20T22:38:32.262Z",
        scheduledEnd: "2025-04-20T22:38:32.262Z",
        actualStart: "2025-04-20T22:38:36.552Z",
        actualEnd: "2025-04-20T22:38:41.566Z",
        estimatedDuration: null,
        progress: 100,
        isRecurring: false,
        context: {
          inputs: {
            UI: "Shadcn",
            styling: "Tailwind CSS",
            language: "TypeScript",
            framework: "Next.js",
          },
          objective:
            "Set up the initial project environment for the blogging website.",
          expectedOutputType: "code",
        },
        tools: [],
        metadata: null,
        summary:
          "Initialized a Next.js project with TypeScript and Tailwind CSS, and installed Shadcn for UI components. The project structure is set up and ready for further development.",
        resultContent:
          '```bash\n# Create a new Next.js project with TypeScript\nnpx create-next-app@latest my-blog --typescript\n\n# Navigate into the project directory\ncd my-blog\n\n# Install Tailwind CSS\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n\n# Configure Tailwind to remove unused styles in production\n# Add the paths to all of your template files in your tailwind.config.js file\nmodule.exports = {\n  content: [\n    "./pages/**/*.{js,ts,jsx,tsx}",\n    "./components/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\n# Add Tailwind\'s base, components, and utilities styles to your globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n# Install Shadcn for UI components\nnpm install shadcn\n```\n\nThe project environment for the blogging website has been successfully set up with Next.js, TypeScript, Tailwind CSS, and Shadcn. The project structure is initialized, and all necessary dependencies are installed.',
        createdAt: "2025-04-20T23:38:32.316Z",
        updatedAt: "2025-04-20T22:38:41.566Z",
      },
      {
        taskId: "dae6e8c3-3c8f-4376-bf0b-2a0240de3f60",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Implement User Authentication",
        description:
          "Develop a user authentication system allowing users to sign up, log in, and log out. Use NextAuth.js for authentication management.",
        status: "completed",
        priority: 2,
        scheduledStart: "2025-04-20T22:38:32.596Z",
        scheduledEnd: "2025-04-20T22:38:32.596Z",
        actualStart: "2025-04-20T22:39:36.552Z",
        actualEnd: "2025-04-20T22:40:41.566Z",
        estimatedDuration: null,
        progress: 100,
        isRecurring: false,
        context: {
          inputs: {
            authenticationLibrary: "NextAuth.js",
          },
          objective: "Create a secure user authentication system.",
          expectedOutputType: "code",
        },
        tools: [],
        metadata: null,
        summary:
          "Implemented a complete authentication system using NextAuth.js with credential provider and database session storage. Created sign-up, login, and profile pages with form validation.",
        resultContent:
          '```typescript\n// pages/api/auth/[...nextauth].ts\nimport NextAuth, { NextAuthOptions } from "next-auth";\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { PrismaAdapter } from "@next-auth/prisma-adapter";\nimport { prisma } from "@/lib/prisma";\nimport { compare } from "bcrypt";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: "Credentials",\n      credentials: {\n        email: { label: "Email", type: "email" },\n        password: { label: "Password", type: "password" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        });\n\n        if (!user) {\n          return null;\n        }\n\n        const isPasswordValid = await compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image\n        };\n      }\n    })\n  ],\n  pages: {\n    signIn: "/login",\n    signOut: "/",\n    error: "/login",\n    newUser: "/profile"\n  },\n  session: {\n    strategy: "jwt"\n  },\n  callbacks: {\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    }\n  }\n};\n\nexport default NextAuth(authOptions);\n```\n\n```typescript\n// components/auth/login-form.tsx\nimport { useState } from "react";\nimport { useForm } from "react-hook-form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport { z } from "zod";\nimport { signIn } from "next-auth/react";\nimport { useRouter } from "next/router";\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Alert, AlertDescription } from "@/components/ui/alert";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: "Please enter a valid email address" }),\n  password: z.string().min(6, { message: "Password must be at least 6 characters" }),\n});\n\nexport default function LoginForm() {\n  const router = useRouter();\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    setError(null);\n\n    const result = await signIn("credentials", {\n      email: values.email,\n      password: values.password,\n      redirect: false,\n    });\n\n    setIsLoading(false);\n\n    if (result?.error) {\n      setError("Invalid email or password");\n      return;\n    }\n\n    router.push("/");\n  }\n\n  return (\n    <Card className="w-full max-w-md mx-auto">\n      <CardHeader>\n        <CardTitle>Login</CardTitle>\n        <CardDescription>Enter your credentials to access your account</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">\n            {error && (\n              <Alert variant="destructive">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <FormField\n              control={form.control}\n              name="email"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder="your.email@example.com" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name="password"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type="password" placeholder="••••••••" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type="submit" className="w-full" disabled={isLoading}>\n              {isLoading ? "Logging in..." : "Login"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className="flex justify-center">\n        <Button variant="link" onClick={() => router.push("/register")}>\n          Don\'t have an account? Register\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```\n\n```typescript\n// lib/prisma.ts\nimport { PrismaClient } from "@prisma/client";\n\ndeclare global {\n  var prisma: PrismaClient | undefined;\n}\n\nexport const prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== "production") global.prisma = prisma;\n```',
        createdAt: "2025-04-20T23:38:32.654Z",
        updatedAt: "2025-04-20T22:40:41.566Z",
      },
      {
        taskId: "bd2f650e-1f45-4580-b4b6-59993bf222fd",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Develop Blog Post Feature",
        description:
          "Create a feature that allows users to create, edit, and delete blog posts. Ensure that the posts are stored in a database and can be retrieved efficiently.",
        status: "in_progress",
        priority: 2,
        scheduledStart: "2025-04-20T22:38:32.575Z",
        scheduledEnd: "2025-04-20T22:38:32.575Z",
        actualStart: "2025-04-20T22:41:36.552Z",
        actualEnd: null,
        estimatedDuration: null,
        progress: 65,
        isRecurring: false,
        context: {
          inputs: {
            database: "PostgreSQL",
          },
          objective: "Enable users to manage their blog posts.",
          expectedOutputType: "code",
        },
        tools: [],
        metadata: null,
        summary: null,
        resultContent: null,
        createdAt: "2025-04-20T23:38:32.629Z",
        updatedAt: "2025-04-20T22:38:32.629Z",
      },
      {
        taskId: "7a31fb5c-2754-47c8-b4d9-ee4af1acc7e9",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Implement Like and Comment Features",
        description:
          "Develop functionalities that allow users to like and comment on blog posts. Ensure that these interactions are stored and displayed correctly.",
        status: "pending",
        priority: 2,
        scheduledStart: "2025-04-20T22:38:32.523Z",
        scheduledEnd: "2025-04-20T22:38:32.523Z",
        actualStart: null,
        actualEnd: null,
        estimatedDuration: null,
        progress: 0,
        isRecurring: false,
        context: {
          inputs: {
            features: ["like", "comment"],
          },
          objective:
            "Allow users to interact with blog posts through likes and comments.",
          expectedOutputType: "code",
        },
        tools: [],
        metadata: null,
        summary: null,
        resultContent: null,
        createdAt: "2025-04-20T23:38:32.577Z",
        updatedAt: "2025-04-20T22:38:32.577Z",
      },
      {
        taskId: "78b1b61e-f2d8-433c-9a0f-c41e1d8331d2",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Ensure Responsive Design",
        description:
          "Ensure that the website is responsive and works well on different devices and screen sizes. Use Tailwind CSS for styling and responsiveness.",
        status: "pending",
        priority: 2,
        scheduledStart: "2025-04-20T22:38:32.517Z",
        scheduledEnd: "2025-04-20T22:38:32.517Z",
        actualStart: null,
        actualEnd: null,
        estimatedDuration: null,
        progress: 0,
        isRecurring: false,
        context: {
          inputs: {
            styling: "Tailwind CSS",
          },
          objective: "Create a responsive design for the blogging website.",
          expectedOutputType: "code",
        },
        tools: [],
        metadata: null,
        summary: null,
        resultContent: null,
        createdAt: "2025-04-20T23:38:32.571Z",
        updatedAt: "2025-04-20T22:38:32.571Z",
      },
      {
        taskId: "f8d72e5a-9c1b-4bf5-a617-d32e43c1a8c9",
        agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
        goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
        sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
        title: "Create Blog Post UI Design",
        description:
          "Design the user interface for the blog posts, including the layout, typography, and visual elements.",
        status: "completed",
        priority: 2,
        scheduledStart: "2025-04-20T22:39:32.596Z",
        scheduledEnd: "2025-04-20T22:40:32.596Z",
        actualStart: "2025-04-20T22:39:36.552Z",
        actualEnd: "2025-04-20T22:40:41.566Z",
        estimatedDuration: null,
        progress: 100,
        isRecurring: false,
        context: {
          inputs: {
            design: "Modern minimalist",
            colorScheme: "Light with accent colors",
          },
          objective:
            "Create an appealing and user-friendly blog post interface.",
          expectedOutputType: "image",
        },
        tools: [],
        metadata: null,
        summary:
          "Created a clean, modern blog post interface design with responsive layout and intuitive navigation. The design features a minimalist aesthetic with strategic use of whitespace and typography.",
        resultContent:
          "I've designed a modern, minimalist blog post interface that prioritizes readability and user experience.\n\n![Blog Post Interface Design](https://hebbkx1anhila5yf.public.blob.vercel-storage.com/placeholder-ob7miW3mUreePYfXdVwkpFWHthzoR5.svg?height=600&width=800)\n\nThe design includes:\n\n- Clean typography with sans-serif fonts for headers and serif for body text\n- Generous whitespace to improve readability\n- Subtle accent colors for interactive elements\n- Responsive layout that adapts to different screen sizes\n- Intuitive navigation with clear visual hierarchy\n- Like and comment sections with visual feedback\n- Author information with profile picture\n\nThe interface is designed to be implemented with Tailwind CSS, making it easy to maintain consistency across the application while ensuring responsive behavior on all devices.\n\nThe layout follows a content-first approach with a clean hierarchy that guides the reader through the content naturally. The comment section is designed to encourage engagement while maintaining the minimalist aesthetic of the overall design.",
        createdAt: "2025-04-20T23:38:32.654Z",
        updatedAt: "2025-04-20T22:40:41.566Z",
      },
    ],
  });

  return { goal, setGoal };
}
