"use client";

import { useState } from "react";

interface TaskContext {
  inputs?: Record<string, any>;
  objective?: string;
  expectedOutputType?: string;
}

interface Task {
  taskId: string;
  agentId?: string;
  goalId?: string;
  sessionId?: string;
  title: string;
  description: string;
  status: "pending" | "in_progress" | "completed" | "failed";
  priority: number;
  scheduledStart?: string;
  scheduledEnd?: string;
  actualStart?: string | null;
  actualEnd?: string | null;
  estimatedDuration?: string | null;
  progress: number;
  isRecurring?: boolean;
  context?: TaskContext;
  tools?: any[];
  metadata?: any;
  summary?: string | null;
  resultContent?: string | null;
  createdAt: string;
  updatedAt: string;
}

interface Goal {
  goalId: string;
  agentId?: string;
  sessionId?: string;
  title: string;
  description: string;
  status: "pending" | "in_progress" | "completed" | "failed";
  priority: number;
  deadline?: string;
  progress: number;
  isAutoGenerated?: boolean;
  metadata?: any;
  createdAt: string;
  updatedAt: string;
  completedAt?: string | null;
  tasks: Task[];
}

export function useGoals() {
  const [goals, setGoals] = useState<Goal[]>([
    {
      goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
      agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
      sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
      title: "Develop a Blogging Website",
      description:
        "Create a fully functional blogging website where users can post blogs, like, and comment on them. The website should be built using TypeScript, Next.js, Tailwind CSS, and Shadcn.",
      status: "in_progress",
      priority: 2,
      deadline: "2025-04-20T23:37:54.061Z",
      progress: 40,
      isAutoGenerated: false,
      metadata: null,
      createdAt: "2025-04-20T23:38:25.282Z",
      updatedAt: "2025-04-20T22:38:25.282Z",
      completedAt: null,
      tasks: [
        {
          taskId: "6e743f6e-8bdc-4bdd-b9e3-167755200902",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
          sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
          title: "Set Up Project Environment",
          description:
            "Initialize a new Next.js project with TypeScript and Tailwind CSS. Set up the project structure and install necessary dependencies including Shadcn for UI components.",
          status: "completed",
          priority: 1,
          scheduledStart: "2025-04-20T22:38:32.262Z",
          scheduledEnd: "2025-04-20T22:38:32.262Z",
          actualStart: "2025-04-20T22:38:36.552Z",
          actualEnd: "2025-04-20T22:38:41.566Z",
          estimatedDuration: null,
          progress: 100,
          isRecurring: false,
          context: {
            inputs: {
              UI: "Shadcn",
              styling: "Tailwind CSS",
              language: "TypeScript",
              framework: "Next.js",
            },
            objective:
              "Set up the initial project environment for the blogging website.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary:
            "Initialized a Next.js project with TypeScript and Tailwind CSS, and installed Shadcn for UI components. The project structure is set up and ready for further development.",
          resultContent:
            '```bash\n# Create a new Next.js project with TypeScript\nnpx create-next-app@latest my-blog --typescript\n\n# Navigate into the project directory\ncd my-blog\n\n# Install Tailwind CSS\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n\n# Configure Tailwind to remove unused styles in production\n# Add the paths to all of your template files in your tailwind.config.js file\nmodule.exports = {\n  content: [\n    "./pages/**/*.{js,ts,jsx,tsx}",\n    "./components/**/*.{js,ts,jsx,tsx}",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n\n# Add Tailwind\'s base, components, and utilities styles to your globals.css\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n# Install Shadcn for UI components\nnpm install shadcn\n```\n\nThe project environment for the blogging website has been successfully set up with Next.js, TypeScript, Tailwind CSS, and Shadcn. The project structure is initialized, and all necessary dependencies are installed.',
          createdAt: "2025-04-20T23:38:32.316Z",
          updatedAt: "2025-04-20T22:38:41.566Z",
        },
        {
          taskId: "dae6e8c3-3c8f-4376-bf0b-2a0240de3f60",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
          sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
          title: "Implement User Authentication",
          description:
            "Develop a user authentication system allowing users to sign up, log in, and log out. Use NextAuth.js for authentication management.",
          status: "completed",
          priority: 2,
          scheduledStart: "2025-04-20T22:38:32.596Z",
          scheduledEnd: "2025-04-20T22:38:32.596Z",
          actualStart: "2025-04-20T22:39:36.552Z",
          actualEnd: "2025-04-20T22:40:41.566Z",
          estimatedDuration: null,
          progress: 100,
          isRecurring: false,
          context: {
            inputs: {
              authenticationLibrary: "NextAuth.js",
            },
            objective: "Create a secure user authentication system.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary:
            "Implemented a complete authentication system using NextAuth.js with credential provider and database session storage. Created sign-up, login, and profile pages with form validation.",
          resultContent:
            '```typescript\n// pages/api/auth/[...nextauth].ts\nimport NextAuth, { NextAuthOptions } from "next-auth";\nimport CredentialsProvider from "next-auth/providers/credentials";\nimport { PrismaAdapter } from "@next-auth/prisma-adapter";\nimport { prisma } from "@/lib/prisma";\nimport { compare } from "bcrypt";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: "Credentials",\n      credentials: {\n        email: { label: "Email", type: "email" },\n        password: { label: "Password", type: "password" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        });\n\n        if (!user) {\n          return null;\n        }\n\n        const isPasswordValid = await compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          return null;\n        }\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          image: user.image\n        };\n      }\n    })\n  ],\n  pages: {\n    signIn: "/login",\n    signOut: "/",\n    error: "/login",\n    newUser: "/profile"\n  },\n  session: {\n    strategy: "jwt"\n  },\n  callbacks: {\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    }\n  }\n};\n\nexport default NextAuth(authOptions);\n```\n\n```typescript\n// components/auth/login-form.tsx\nimport { useState } from "react";\nimport { useForm } from "react-hook-form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport { z } from "zod";\nimport { signIn } from "next-auth/react";\nimport { useRouter } from "next/router";\nimport { Button } from "@/components/ui/button";\nimport { Input } from "@/components/ui/input";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Alert, AlertDescription } from "@/components/ui/alert";\n\nconst formSchema = z.object({\n  email: z.string().email({ message: "Please enter a valid email address" }),\n  password: z.string().min(6, { message: "Password must be at least 6 characters" }),\n});\n\nexport default function LoginForm() {\n  const router = useRouter();\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      email: "",\n      password: "",\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setIsLoading(true);\n    setError(null);\n\n    const result = await signIn("credentials", {\n      email: values.email,\n      password: values.password,\n      redirect: false,\n    });\n\n    setIsLoading(false);\n\n    if (result?.error) {\n      setError("Invalid email or password");\n      return;\n    }\n\n    router.push("/");\n  }\n\n  return (\n    <Card className="w-full max-w-md mx-auto">\n      <CardHeader>\n        <CardTitle>Login</CardTitle>\n        <CardDescription>Enter your credentials to access your account</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">\n            {error && (\n              <Alert variant="destructive">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n            <FormField\n              control={form.control}\n              name="email"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input placeholder="your.email@example.com" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name="password"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <Input type="password" placeholder="••••••••" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <Button type="submit" className="w-full" disabled={isLoading}>\n              {isLoading ? "Logging in..." : "Login"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n      <CardFooter className="flex justify-center">\n        <Button variant="link" onClick={() => router.push("/register")}>\n          Don\'t have an account? Register\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n```',
          createdAt: "2025-04-20T23:38:32.654Z",
          updatedAt: "2025-04-20T22:40:41.566Z",
        },
        {
          taskId: "bd2f650e-1f45-4580-b4b6-59993bf222fd",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "2d226ea3-fc25-45ff-9463-01cebe59d090",
          sessionId: "4add1f3e-7e50-4820-8de7-9f20b0a6122b",
          title: "Develop Blog Post Feature",
          description:
            "Create a feature that allows users to create, edit, and delete blog posts. Ensure that the posts are stored in a database and can be retrieved efficiently.",
          status: "in_progress",
          priority: 2,
          scheduledStart: "2025-04-20T22:38:32.575Z",
          scheduledEnd: "2025-04-20T22:38:32.575Z",
          actualStart: "2025-04-20T22:41:36.552Z",
          actualEnd: null,
          estimatedDuration: null,
          progress: 65,
          isRecurring: false,
          context: {
            inputs: {
              database: "PostgreSQL",
            },
            objective: "Enable users to manage their blog posts.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary: null,
          resultContent: null,
          createdAt: "2025-04-20T23:38:32.629Z",
          updatedAt: "2025-04-20T22:38:32.629Z",
        },
      ],
    },
    {
      goalId: "3e337ea4-gd36-56gg-0574-12defg70d101",
      agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
      sessionId: "5bee2g4f-8f61-5931-9ef8-0g31b1b7233c",
      title: "Build an E-commerce Dashboard",
      description:
        "Create a comprehensive e-commerce dashboard with sales analytics, inventory management, and customer insights. The dashboard should provide real-time data visualization and actionable insights.",
      status: "in_progress",
      priority: 1,
      deadline: "2025-05-15T23:37:54.061Z",
      progress: 60,
      isAutoGenerated: false,
      metadata: null,
      createdAt: "2025-04-15T20:28:15.282Z",
      updatedAt: "2025-04-15T20:28:15.282Z",
      completedAt: null,
      tasks: [
        {
          taskId: "7f854g7f-9cdc-5cee-c0f4-278866311013",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "3e337ea4-gd36-56gg-0574-12defg70d101",
          sessionId: "5bee2g4f-8f61-5931-9ef8-0g31b1b7233c",
          title: "Design Dashboard Layout",
          description:
            "Create a responsive dashboard layout with navigation, widgets, and data visualization components.",
          status: "completed",
          priority: 1,
          scheduledStart: "2025-04-15T20:30:32.262Z",
          scheduledEnd: "2025-04-15T22:30:32.262Z",
          actualStart: "2025-04-15T20:30:36.552Z",
          actualEnd: "2025-04-15T22:15:41.566Z",
          estimatedDuration: null,
          progress: 100,
          isRecurring: false,
          context: {
            inputs: {
              UI: "Shadcn",
              styling: "Tailwind CSS",
              charts: "Recharts",
            },
            objective: "Create an intuitive and responsive dashboard layout.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary:
            "Designed a responsive dashboard layout with a sidebar navigation, header with user profile, and main content area with widgets for sales, inventory, and customer data.",
          resultContent:
            '```tsx\n// components/dashboard/layout.tsx\nimport { ReactNode } from "react";\nimport Sidebar from "./sidebar";\nimport Header from "./header";\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n}\n\nexport default function DashboardLayout({ children }: DashboardLayoutProps) {\n  return (\n    <div className="flex h-screen bg-gray-100 dark:bg-gray-900">\n      <Sidebar />\n      <div className="flex flex-col flex-1 overflow-hidden">\n        <Header />\n        <main className="flex-1 overflow-y-auto p-4 md:p-6">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n```\n\n```tsx\n// components/dashboard/sidebar.tsx\nimport { useState } from "react";\nimport Link from "next/link";\nimport { useRouter } from "next/router";\nimport { cn } from "@/lib/utils";\nimport { Button } from "@/components/ui/button";\nimport { LayoutDashboard, ShoppingCart, Package, Users, Settings, ChevronLeft, ChevronRight } from \'lucide-react\';\n\nconst navItems = [\n  { href: "/dashboard", label: "Dashboard", icon: LayoutDashboard },\n  { href: "/dashboard/sales", label: "Sales", icon: ShoppingCart },\n  { href: "/dashboard/inventory", label: "Inventory", icon: Package },\n  { href: "/dashboard/customers", label: "Customers", icon: Users },\n  { href: "/dashboard/settings", label: "Settings", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const router = useRouter();\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <aside\n      className={cn(\n        "bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-all duration-300 ease-in-out",\n        collapsed ? "w-16" : "w-64"\n      )}\n    >\n      <div className="flex flex-col h-full">\n        <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200 dark:border-gray-700">\n          {!collapsed && (\n            <h2 className="text-lg font-semibold">E-Commerce</h2>\n          )}\n          <Button\n            variant="ghost"\n            size="icon"\n            onClick={() => setCollapsed(!collapsed)}\n            className="ml-auto"\n          >\n            {collapsed ? <ChevronRight size={18} /> : <ChevronLeft size={18} />}\n          </Button>\n        </div>\n        <nav className="flex-1 p-2 space-y-1">\n          {navItems.map((item) => {\n            const isActive = router.pathname === item.href;\n            return (\n              <Link\n                key={item.href}\n                href={item.href}\n                className={cn(\n                  "flex items-center px-3 py-2 rounded-md transition-colors",\n                  isActive\n                    ? "bg-gray-100 dark:bg-gray-700 text-primary"\n                    : "text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"\n                )}\n              >\n                <item.icon size={20} className="shrink-0" />\n                {!collapsed && <span className="ml-3">{item.label}</span>}\n              </Link>\n            );\n          })}\n        </nav>\n      </div>\n    </aside>\n  );\n}\n```\n\n```tsx\n// components/dashboard/header.tsx\nimport { useState } from "react";\nimport { Bell, Search, User } from \'lucide-react\';\nimport { Input } from "@/components/ui/input";\nimport { Button } from "@/components/ui/button";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from "@/components/ui/dropdown-menu";\nimport { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";\n\nexport default function Header() {\n  return (\n    <header className="h-16 border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 flex items-center justify-between px-4 md:px-6">\n      <div className="relative w-full max-w-md mr-4 hidden md:flex">\n        <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-gray-500 dark:text-gray-400" />\n        <Input\n          type="search"\n          placeholder="Search..."\n          className="pl-8 bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600"\n        />\n      </div>\n      <div className="flex items-center space-x-4 ml-auto">\n        <Button variant="ghost" size="icon" className="relative">\n          <Bell size={20} />\n          <span className="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full" />\n        </Button>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant="ghost" size="icon" className="rounded-full">\n              <Avatar>\n                <AvatarImage src="/placeholder.svg" alt="User" />\n                <AvatarFallback>JD</AvatarFallback>\n              </Avatar>\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align="end">\n            <DropdownMenuLabel>My Account</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Profile</DropdownMenuItem>\n            <DropdownMenuItem>Settings</DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>Logout</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </header>\n  );\n}\n```',
          createdAt: "2025-04-15T20:30:32.316Z",
          updatedAt: "2025-04-15T22:15:41.566Z",
        },
        {
          taskId: "8g965h8g-0ded-6dff-d1g5-389977422124",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "3e337ea4-gd36-56gg-0574-12defg70d101",
          sessionId: "5bee2g4f-8f61-5931-9ef8-0g31b1b7233c",
          title: "Implement Sales Analytics",
          description:
            "Create interactive charts and visualizations for sales data, including revenue trends, product performance, and conversion rates.",
          status: "completed",
          priority: 1,
          scheduledStart: "2025-04-16T09:00:32.596Z",
          scheduledEnd: "2025-04-16T17:00:32.596Z",
          actualStart: "2025-04-16T09:15:36.552Z",
          actualEnd: "2025-04-16T16:40:41.566Z",
          estimatedDuration: null,
          progress: 100,
          isRecurring: false,
          context: {
            inputs: {
              charts: "Recharts",
              dataFormat: "JSON",
            },
            objective:
              "Create interactive and insightful sales analytics visualizations.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary:
            "Implemented a comprehensive sales analytics dashboard with interactive charts for revenue trends, product performance, and conversion rates. Added filtering capabilities and export options.",
          resultContent:
            '```tsx\n// components/dashboard/sales/revenue-chart.tsx\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, TooltipProps } from "recharts";\nimport { format } from "date-fns";\n\ninterface RevenueData {\n  date: string;\n  revenue: number;\n}\n\ninterface RevenueChartProps {\n  data: RevenueData[];\n}\n\nexport default function RevenueChart({ data }: RevenueChartProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Revenue</CardTitle>\n        <CardDescription>Revenue trends over time</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Tabs defaultValue="weekly">\n          <TabsList className="mb-4">\n            <TabsTrigger value="daily">Daily</TabsTrigger>\n            <TabsTrigger value="weekly">Weekly</TabsTrigger>\n            <TabsTrigger value="monthly">Monthly</TabsTrigger>\n            <TabsTrigger value="yearly">Yearly</TabsTrigger>\n          </TabsList>\n          <TabsContent value="daily" className="h-[300px]">\n            <ResponsiveContainer width="100%" height="100%">\n              <AreaChart data={data}>\n                <defs>\n                  <linearGradient id="colorRevenue" x1="0" y1="0" x2="0" y2="1">\n                    <stop offset="5%" stopColor="#8884d8" stopOpacity={0.8} />\n                    <stop offset="95%" stopColor="#8884d8" stopOpacity={0} />\n                  </linearGradient>\n                </defs>\n                <XAxis\n                  dataKey="date"\n                  tickFormatter={(date) => format(new Date(date), "MMM d")}\n                  stroke="#888888"\n                  fontSize={12}\n                />\n                <YAxis\n                  tickFormatter={(value) => `$${value}`}\n                  stroke="#888888"\n                  fontSize={12}\n                />\n                <CartesianGrid strokeDasharray="3 3" className="stroke-gray-200" />\n                <Tooltip\n                  content={({ active, payload }) => {\n                    if (active && payload && payload.length) {\n                      return (\n                        <div className="bg-white dark:bg-gray-800 p-2 border border-gray-200 dark:border-gray-700 rounded-md shadow-md">\n                          <p className="text-sm font-medium">\n                            {format(new Date(payload[0].payload.date), "MMM d, yyyy")}\n                          </p>\n                          <p className="text-sm font-semibold text-purple-600">\n                            ${payload[0].value?.toString()}\n                          </p>\n                        </div>\n                      );\n                    }\n                    return null;\n                  }}\n                />\n                <Area\n                  type="monotone"\n                  dataKey="revenue"\n                  stroke="#8884d8"\n                  fillOpacity={1}\n                  fill="url(#colorRevenue)"\n                />\n              </AreaChart>\n            </ResponsiveContainer>\n          </TabsContent>\n          {/* Similar content for other tabs */}\n        </Tabs>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx\n// components/dashboard/sales/product-performance.tsx\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Cell } from "recharts";\n\ninterface ProductData {\n  name: string;\n  sales: number;\n  color: string;\n}\n\ninterface ProductPerformanceProps {\n  data: ProductData[];\n}\n\nexport default function ProductPerformance({ data }: ProductPerformanceProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Product Performance</CardTitle>\n        <CardDescription>Top selling products by revenue</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width="100%" height={300}>\n          <BarChart data={data} layout="vertical" margin={{ top: 20, right: 30, left: 40, bottom: 5 }}>\n            <CartesianGrid strokeDasharray="3 3" horizontal={true} vertical={false} />\n            <XAxis type="number" tickFormatter={(value) => `$${value}`} />\n            <YAxis type="category" dataKey="name" width={100} />\n            <Tooltip\n              formatter={(value) => [`$${value}`, \'Sales\']}\n              labelFormatter={(label) => `Product: ${label}`}\n            />\n            <Bar dataKey="sales" radius={[0, 4, 4, 0]}>\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Bar>\n          </BarChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n```\n\n```tsx\n// components/dashboard/sales/conversion-rates.tsx\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from "recharts";\n\ninterface ConversionData {\n  name: string;\n  value: number;\n  color: string;\n}\n\ninterface ConversionRatesProps {\n  data: ConversionData[];\n}\n\nexport default function ConversionRates({ data }: ConversionRatesProps) {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Conversion Rates</CardTitle>\n        <CardDescription>Customer journey conversion metrics</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ResponsiveContainer width="100%" height={300}>\n          <PieChart>\n            <Pie\n              data={data}\n              cx="50%"\n              cy="50%"\n              labelLine={false}\n              outerRadius={80}\n              fill="#8884d8"\n              dataKey="value"\n              label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            >\n              {data.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip formatter={(value) => `${value}%`} />\n            <Legend />\n          </PieChart>\n        </ResponsiveContainer>\n      </CardContent>\n    </Card>\n  );\n}\n```',
          createdAt: "2025-04-16T09:15:36.552Z",
          updatedAt: "2025-04-16T16:40:41.566Z",
        },
        {
          taskId: "9h076i9h-1efe-7egg-e2h6-490088533235",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "3e337ea4-gd36-56gg-0574-12defg70d101",
          sessionId: "5bee2g4f-8f61-5931-9ef8-0g31b1b7233c",
          title: "Develop Inventory Management System",
          description:
            "Create an inventory management system with product tracking, stock alerts, and inventory forecasting.",
          status: "in_progress",
          priority: 2,
          scheduledStart: "2025-04-17T09:00:32.575Z",
          scheduledEnd: "2025-04-18T17:00:32.575Z",
          actualStart: "2025-04-17T09:30:36.552Z",
          actualEnd: null,
          estimatedDuration: null,
          progress: 70,
          isRecurring: false,
          context: {
            inputs: {
              database: "PostgreSQL",
              features: [
                "product tracking",
                "stock alerts",
                "inventory forecasting",
              ],
            },
            objective: "Create a comprehensive inventory management system.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary: null,
          resultContent: null,
          createdAt: "2025-04-17T09:00:32.629Z",
          updatedAt: "2025-04-17T09:00:32.629Z",
        },
      ],
    },
    {
      goalId: "4f448fb5-he47-67hh-1685-23efgh81e212",
      agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
      sessionId: "6cff3h5g-9g72-6042-0fg9-1h42c2c8344d",
      title: "Create a Mobile Fitness App",
      description:
        "Develop a mobile fitness application that tracks workouts, provides personalized training plans, and monitors nutrition. The app should include social features for sharing progress and achievements.",
      status: "pending",
      priority: 3,
      deadline: "2025-06-10T23:37:54.061Z",
      progress: 10,
      isAutoGenerated: false,
      metadata: null,
      createdAt: "2025-04-18T14:18:05.282Z",
      updatedAt: "2025-04-18T14:18:05.282Z",
      completedAt: null,
      tasks: [
        {
          taskId: "0i187j0i-2fgf-8fhh-f3i7-5011995443346",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "4f448fb5-he47-67hh-1685-23efgh81e212",
          sessionId: "6cff3h5g-9g72-6042-0fg9-1h42c2c8344d",
          title: "Design App Wireframes",
          description:
            "Create wireframes and mockups for the fitness app, including screens for workout tracking, nutrition monitoring, and social features.",
          status: "completed",
          priority: 1,
          scheduledStart: "2025-04-18T14:20:32.262Z",
          scheduledEnd: "2025-04-19T14:20:32.262Z",
          actualStart: "2025-04-18T14:25:36.552Z",
          actualEnd: "2025-04-19T12:15:41.566Z",
          estimatedDuration: null,
          progress: 100,
          isRecurring: false,
          context: {
            inputs: {
              design: "Modern minimalist",
              platform: "React Native",
              colorScheme: "Blue and green with white background",
            },
            objective:
              "Create intuitive and visually appealing wireframes for the fitness app.",
            expectedOutputType: "image",
          },
          tools: [],
          metadata: null,
          summary:
            "Created comprehensive wireframes for the fitness app, including screens for workout tracking, nutrition monitoring, progress visualization, and social sharing. The design follows a modern minimalist aesthetic with an intuitive user flow.",
          resultContent:
            "I've designed modern, minimalist wireframes for the fitness app that prioritize usability and clean aesthetics.\n\n![Fitness App Wireframes](https://hebbkx1anhila5yf.public.blob.vercel-storage.com/placeholder-ob7miW3mUreePYfXdVwkpFWHthzoR5.svg?height=800&width=400)\n\nThe wireframes include the following key screens:\n\n- Home dashboard with activity summary and quick actions\n- Workout tracking with exercise library and custom routines\n- Nutrition tracking with meal planning and calorie monitoring\n- Progress visualization with charts and achievement badges\n- Social feed for sharing workouts and connecting with friends\n- Profile management and settings\n\nThe design uses a blue and green color scheme on a white background, creating a fresh and energetic feel that's appropriate for a fitness application. The interface is designed to be intuitive with clear navigation and prominent call-to-action buttons.\n\nThe wireframes are optimized for React Native implementation, ensuring consistent experience across iOS and Android platforms while maintaining native-like performance and interactions.",
          createdAt: "2025-04-18T14:20:32.316Z",
          updatedAt: "2025-04-19T12:15:41.566Z",
        },
        {
          taskId: "1j298k1j-3ghg-9gii-g4j8-612006554457",
          agentId: "0x385e15a9d5e94c3df8090dc024473b6002f03c03",
          goalId: "4f448fb5-he47-67hh-1685-23efgh81e212",
          sessionId: "6cff3h5g-9g72-6042-0fg9-1h42c2c8344d",
          title: "Set Up React Native Project",
          description:
            "Initialize a new React Native project with TypeScript, set up the project structure, and install necessary dependencies.",
          status: "pending",
          priority: 1,
          scheduledStart: "2025-04-20T09:00:32.596Z",
          scheduledEnd: "2025-04-20T17:00:32.596Z",
          actualStart: null,
          actualEnd: null,
          estimatedDuration: null,
          progress: 0,
          isRecurring: false,
          context: {
            inputs: {
              framework: "React Native",
              language: "TypeScript",
              stateManagement: "Redux Toolkit",
              navigation: "React Navigation",
            },
            objective: "Set up the initial React Native project environment.",
            expectedOutputType: "code",
          },
          tools: [],
          metadata: null,
          summary: null,
          resultContent: null,
          createdAt: "2025-04-18T14:22:32.654Z",
          updatedAt: "2025-04-18T14:22:32.654Z",
        },
      ],
    },
  ]);

  const [selectedGoalId, setSelectedGoalId] = useState<string>(
    goals.length > 0 ? goals[0].goalId : ""
  );

  const selectedGoal =
    goals.find((goal) => goal.goalId === selectedGoalId) || null;

  return { goals, selectedGoal, selectedGoalId, setSelectedGoalId };
}
