type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AgentRegistered @entity(immutable: true) {
  id: Bytes!
  agentAddress: Bytes! # address
  isCommonAgent: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReputationUpdated @entity(immutable: true) {
  id: Bytes!
  agentAddress: Bytes! # address
  newReputation: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AgentRegistryRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AgentRegistryRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AgentRegistryRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EIP712DomainChanged @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResourceCostUpdated @entity(immutable: true) {
  id: Bytes!
  resourceId: BigInt! # uint256
  newCost: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResourceCreated @entity(immutable: true) {
  id: Bytes!
  resourceId: BigInt! # uint256
  creator: Bytes! # address
  isCoreResource: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResourceReputationUpdated @entity(immutable: true) {
  id: Bytes!
  resourceId: BigInt! # uint256
  newReputation: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ResourceUsed @entity(immutable: true) {
  id: Bytes!
  resourceId: BigInt! # uint256
  user: Bytes! # address
  accessProof: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommonResourceRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommonResourceRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CommonResourceRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  ids: [BigInt!]! # uint256[]
  values: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  internal_id: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type URI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  internal_id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AttributionRecorded @entity(immutable: true) {
  id: Bytes!
  resourceId: BigInt! # uint256
  parentResources: [BigInt!]! # uint256[]
  relationTypes: [Int!]! # uint8[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AttributionRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AttributionRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AttributionRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type CompletedTask @entity(immutable: true) {
  id: Bytes!
  taskId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreatedTask @entity(immutable: true) {
  id: Bytes!
  taskId: BigInt! # uint256
  creator: Bytes! # address
  parentTaskId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type JoinedTask @entity(immutable: true) {
  id: Bytes!
  taskId: BigInt! # uint256
  agent: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RecordedContribution @entity(immutable: true) {
  id: Bytes!
  taskId: BigInt! # uint256
  contributor: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskManagerRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskManagerRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskManagerRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TaskRewardsDistributed @entity(immutable: true) {
  id: Bytes!
  taskId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

####################################################################
##             Entities for more intuitive querying               ##
####################################################################

# The Agent entity represents a registered agent and holds full onchain data.
type Agent @entity {
  id: ID! # agent address (as hex string)
  owner: Bytes!
  metadata: String!
  reputation: BigInt!
  isCommonAgent: Boolean!
  registrationTime: BigInt!
}

# The CommonResource entity holds resource details.
type CommonResource @entity {
  id: ID! # resourceId as string
  resourceId: BigInt!
  creator: Bytes!
  metadata: String!
  resourceFile: String!
  requiredReputation: BigInt!
  usageCost: BigInt!
  isCoreResource: Boolean!
  totalShares: BigInt!
  usageCount: BigInt! # Number of times this resource has been used
  # Derived relation: list of ResourceContributor entities
  contributors: [ResourceContributor!]! @derivedFrom(field: "resource")
}

# A ResourceContributor is part of a resourceâ€™s ownership.
type ResourceContributor @entity {
  id: ID! # e.g. resourceId-contributorAddress
  resource: CommonResource!
  address: Bytes!
  contributionShare: BigInt!
}

# The Task entity holds tasks and nested data.
type Task @entity {
  id: ID! # taskId as string
  taskId: BigInt!
  creator: Bytes!
  metadata: String!
  reward: BigInt!
  resourceBased: Boolean!
  status: String! # "Open" or "Completed"
  rewardsDistributed: Boolean!
  parentTaskId: BigInt!
  maxParticipants: BigInt!
  currentParticipants: BigInt!
  # Derived relation: all TaskContribution entities for this task.
  contributions: [TaskContribution!]! @derivedFrom(field: "task")
  # For simplicity, we store an array of subtasks (taskIds)
  subtasks: [BigInt!]!
}

# Each task contribution is stored separately.
type TaskContribution @entity {
  id: ID!
  task: Task!
  contributor: Bytes!
  value: BigInt!
}

# The Attribution entity holds attribution records.
type Attribution @entity {
  id: ID! # use resourceId as string
  resourceId: BigInt!
  parentResources: [BigInt!]!
  relationTypes: [String!]!
  contributionDescriptions: [String!]!
  timestamp: BigInt!
  # Derived relation: citations related to this attribution.
  citations: [AttributionCitation!]! @derivedFrom(field: "attribution")
  derivatives: [BigInt!]!
}

# Each citation is stored as a separate entity.
type AttributionCitation @entity {
  id: ID!
  attribution: Attribution!
  citingResourceId: BigInt!
  citedResourceId: BigInt!
  description: String!
  timestamp: BigInt!
}
